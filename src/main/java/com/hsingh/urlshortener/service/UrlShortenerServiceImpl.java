package com.hsingh.urlshortener.service;

import com.hsingh.urlshortener.model.UrlMapping;
import com.hsingh.urlshortener.repository.UrlMappingRepository;
import com.hsingh.urlshortener.util.Base62Encoder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

@Service
public class UrlShortenerServiceImpl implements UrlShortenerService {
    private final String baseUrl;
    UrlMappingRepository urlMappingRepository;

    public UrlShortenerServiceImpl(@Value("${shortener.base-url}") String baseUrl, UrlMappingRepository urlMappingRepository){
        this.baseUrl = baseUrl;
        this.urlMappingRepository = urlMappingRepository;
    }

    @Override
    public String shortenUrl(String originalUrl, String customShortCode) {
        if (hasCustomShortCode(customShortCode)) {
            validateCustomShortCode(customShortCode);
            checkIfShortCodeExists(customShortCode);
            return createWithCustomCode(originalUrl, customShortCode);
        }else{
            return crateWithGeneratedCode(originalUrl);
        }
    }

    @Override
    @Cacheable(value = "shortUrls", key = "#shortCode")
    public String getOriginalUrl(String shortCode) {
        UrlMapping urlMapping = urlMappingRepository.findByShortCode(shortCode)
                .orElseThrow(() -> new RuntimeException("Short code not found"));
        return urlMapping.getOriginalUrl();
    }

    private boolean hasCustomShortCode(String customShortCode) {
        return customShortCode != null && !customShortCode.isBlank();
    }

    private void validateCustomShortCode(String customShortCode) {
        if (!customShortCode.matches("^[a-zA-Z0-9_-]{3,30}$")) {
            throw new IllegalArgumentException("Invalid custom short code format.");
        }
    }

    private void checkIfShortCodeExists(String customShortCode){
        if (urlMappingRepository.findByShortCode(customShortCode).isPresent()) {
            throw new RuntimeException("Custom short code already in use.");
        }
    }

    private String createWithCustomCode(String originalUrl, String customShortCode){
        UrlMapping mapping = new UrlMapping(customShortCode, originalUrl);
        urlMappingRepository.save(mapping);
        return baseUrl + "/" + customShortCode;
    }

    private String crateWithGeneratedCode(String originalUrl){
        UrlMapping urlMapping = new UrlMapping();
        urlMapping.setOriginalUrl(originalUrl);
        //This is not the most optimised way. Id should not be autogenerated from Database
        //But should be generated by some other service
        urlMappingRepository.save(urlMapping);

        String shortCode = Base62Encoder.encode(urlMapping.getId());
        urlMapping.setShortCode(shortCode);

        urlMappingRepository.save(urlMapping);
        return baseUrl + "/" + shortCode;
    }
}
